import os
import csv
import pytest
import tempfile
from io import StringIO
from user_flag_app import DatabaseManager, ContentModerationSystem, MissingFileArgumentError


# Constants
DB_PATH = 'test_database.sqlite3'

# Input data for the test in CSV format
IN_MEM_INPUT_CSV = StringIO("""\
user_id,message
28391029,"I don't believe this speaker!"
28391029,"I totally agree. Great video essay!"
42432992,"You can't make this up!"
""")


def create_input_csv_file(content):
    """Creates a temporary CSV file with the given content."""
    with tempfile.NamedTemporaryFile(delete=False, suffix='.csv') as temp_file:
        temp_file.write(content.getvalue().encode('utf-8'))
        return temp_file.name


def create_output_csv_file_path():
    """Create a temporary directory and return a file path for an output CSV file."""
    temp_output_dir = tempfile.gettempdir()
    temp_output_file_path = os.path.join(temp_output_dir, 'output.csv')
    return temp_output_file_path


# Assign the generated file paths to constants for reuse
PATH_INPUT_CSV_FILE = create_input_csv_file(IN_MEM_INPUT_CSV)
PATH_OUTPUT_CSV_FILE = create_output_csv_file_path()

# Expected data for assertions
EXPECTED_ROWS = [
    {"user_id": "28391029", "total_messages": 2},
    {"user_id": "42432992", "total_messages": 1}
]


@pytest.fixture(scope="module")
def cms_instance():
    """Fixture for setting up and tearing down a Content Moderation System instance."""
    db_manager = DatabaseManager(DB_PATH)
    db_manager.initialize()
    cms = ContentModerationSystem(db_manager)
    yield cms
    for file in [DB_PATH, PATH_INPUT_CSV_FILE, PATH_OUTPUT_CSV_FILE]:
        if os.path.isfile(file):
            os.remove(file)


def test_missing_file_arguments_exception(cms_instance):
    """Test the exception handling for missing file arguments when processing files."""
    with pytest.raises(Exception) as exc:
        cms_instance.process(None, None)
    assert "Not enough file arguments provided. Both input and output files are required." in str(exc.value)
    assert exc.type == MissingFileArgumentError


def test_output_file_creation_and_contents(cms_instance):
    """Test the creation and contents of the output file generated by the main app."""
    cms_instance.process(PATH_INPUT_CSV_FILE, PATH_OUTPUT_CSV_FILE)

    assert os.path.exists(PATH_OUTPUT_CSV_FILE), "Output file was not created"

    with open(PATH_OUTPUT_CSV_FILE, 'r') as csvfile:
        reader = csv.DictReader(csvfile)

        for i, row in enumerate(reader):
            expected_row = EXPECTED_ROWS[i]

            assert row["user_id"] == expected_row["user_id"]
            assert int(row["total_messages"]) == expected_row["total_messages"]

            avg_score = float(row["avg_score"])
            assert 0.0 <= avg_score <= 1.0, f"avg_score {avg_score} is out of range for user_id {row['user_id']}"
